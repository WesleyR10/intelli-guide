// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(uuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole  @default(USER)
  isTwoFactorEnabled Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confirmation")
}

model Courses {
  id       Int    @id @default(autoincrement())
  title    String
  imageSrc String

  Unit         Unit[]
  UserProgress UserProgress[]

  @@map("courses")
}

model Unit {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  coursesId   Int?

  order Int

  Courses Courses?  @relation(fields: [coursesId], references: [id])
  Lessons Lessons[]

  @@map("unit")
}

model Lessons {
  id     Int    @id @default(autoincrement())
  title  String
  unitId Int
  order  Int

  Unit      Unit        @relation(fields: [unitId], references: [id])
  Challenge Challenge[]

  @@map("lessons")
}

enum ChallengeType {
  SELECT
  ASSIST
}

model Challenge {
  id        Int           @id @default(autoincrement())
  lessonId  Int
  type      ChallengeType
  question  String
  order     Int
  lessonsId Int?

  Lessons           Lessons?            @relation(fields: [lessonsId], references: [id])
  ChallengeOption   ChallengeOption[]
  ChallengeProgress ChallengeProgress[]

  @@map("challenge")
}

model ChallengeOption {
  id          Int     @id @default(autoincrement())
  challengeId Int
  text        String
  correct     Boolean
  imageSrc    String?
  audioSrc    String?

  Challenge Challenge @relation(fields: [challengeId], references: [id])

  @@map("challenge_option")
}

model ChallengeProgress {
  id          Int     @id @default(autoincrement())
  userId      String
  challengeId Int
  completed   Boolean @default(false)

  Challenge Challenge @relation(fields: [challengeId], references: [id])

  @@map("challenge_progress")
}

model UserProgress {
  userId         String @id
  userName       String @default("user")
  userImageSrc   String @default("/mascot.svg")
  activeCourseId Int?
  hearts         Int    @default(5)
  points         Int    @default(0)

  activeCourse Courses? @relation(fields: [activeCourseId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model UserSubscription {
  id                     Int      @id @default(autoincrement())
  userId                 String   @unique
  stripeCustomerId       String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime

  @@map("user_subscription")
}
