// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(uuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole  @default(USER)
  isTwoFactorEnabled Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confirmation")
}

model Category {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  imageSrc    String

  quizzes      Quiz[]
  userProgress UserProgress[]

  @@map("categories")
}

model Quiz {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  categoryId  Int
  order       Int

  categories Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  questions  Question[]

  @@map("quiz")
}

model Question {
  id     Int    @id @default(autoincrement())
  title  String
  quizId Int
  order  Int

  quiz            Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionOptions QuestionOption[]

  @@map("question")
}

model QuestionOption {
  id         Int     @id @default(autoincrement())
  questionId Int
  text       String
  correct    Boolean
  imageSrc   String?

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_option")
}

model UserProgress {
  userId           String @id
  userName         String @default("user")
  userImageSrc     String @default("/mascot.svg")
  activeCategoryId Int?
  hearts           Int    @default(5)
  points           Int    @default(0)

  activeCategory Category? @relation(fields: [activeCategoryId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model UserSubscription {
  id                     Int      @id @default(autoincrement())
  userId                 String   @unique
  stripeCustomerId       String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime

  @@map("user_subscription")
}
